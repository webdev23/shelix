#!/usr/bin/bash
# ╔-----------------------------------------------------------------------╗
# ║                                                                       ║
# ║ This file is part of the Shelix IDE.                                  ║
# ║ Copyright (C) 2025 NVRM webdev23 https://github.com/webdev23          ║
# ║                                                                       ║
# ║ This program is free software: you can redistribute it and/or modify  ║
# ║ it under the terms of the GNU General Public License as published by  ║
# ║ the Free Software Foundation, either version 3 of the License, or     ║
# ║ (at your option) any later version.                                   ║
# ║                                                                       ║
# ║ This program is distributed in the hope that it will be useful,       ║
# ║ but WITHOUT ANY WARRANTY; without even the implied warranty of        ║
# ║ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         ║
# ║ GNU General Public License for more details.                          ║
# ║                                                                       ║
# ║ You should have received a copy of the GNU General Public License     ║
# ║ along with this program.  If not, see <http://www.gnu.org/licenses/>. ║
# ╚-----------------------------------------------------------------------╝

# Modify that file to your need!
# Examples are given in comment
#sudo apt install inotify-tools


SESSION_PATH=$($SHELIXPATH/libs/session_path)

echo "File watcher running: $(echo $SESSION_PATH)"
EXCLUDE_FILE="$SESSION_PATH/.exclude"

# Base excludes
EXCLUDE_PATTERNS="shelix\.logs|\.git"

# Add excludes from .exclude
if [[ -f "$EXCLUDE_FILE" ]]; then
  while IFS= read -r line; do
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    escaped=$(echo "$line" | sed -e 's/\./\\./g' -e 's/\//\\\//g')
    EXCLUDE_PATTERNS+="|$escaped"
  done < "$EXCLUDE_FILE"
  echo "Found local .exclude file!"
fi


# Debug: 
echo -e "Excluded \033[7m$EXCLUDE_PATTERNS\e[0m"


echo "File watcher running in $(echo $SESSION_PATH)"


# Watch loop
while read -r DIR EVENT FILE; do
  FULL_PATH="${DIR}${FILE}"
  echo -e "File modified: \033[7m$FULL_PATH\e[0m"

  # Depending what we are doing, we may want to leave a tempo here
   sleep 1 # 1000ms

  # Reload all files in all instances of Helix in the window
  echo ':rla' | $SHELIXPATH/libs/dispatch_all_hx

  # Inform user (YOU!) with a 2s popup
  # notify "Files reloaded" 2

  # Inform using a status bar message
  tmux display-message 'Files reloaded'

  if [ "$($SHELIXPATH/libs/has_mark)" == "1" ]; then
    tmux send-keys -t '~' UP ENTER
  fi
done < <(inotifywait --format '%w %e %f' --exclude "$EXCLUDE_PATTERNS" -r -e modify "$SESSION_PATH")

$SHELIXPATH/libs/watcher



