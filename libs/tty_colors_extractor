#!/usr/bin/env php
<?php
/*
╔-----------------------------------------------------------------------╗
║                                                                       ║
║ This file is part of the Shelix IDE.                                  ║
║ Copyright (C) 2024 NVRM webdev23 https://github.com/webdev23          ║
║                                                                       ║
║ This program is free software: you can redistribute it and/or modify  ║
║ it under the terms of the GNU General Public License as published by  ║
║ the Free Software Foundation, either version 3 of the License, or     ║
║ (at your option) any later version.                                   ║
║                                                                       ║
║ This program is distributed in the hope that it will be useful,       ║
║ but WITHOUT ANY WARRANTY; without even the implied warranty of        ║
║ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         ║
║ GNU General Public License for more details.                          ║
║                                                                       ║
║ You should have received a copy of the GNU General Public License     ║
║ along with this program.  If not, see <http://www.gnu.org/licenses/>. ║
╚-----------------------------------------------------------------------╝*/

# This program extracts RGB colors from ANSI escaped buffers



$BUFFER = @file_get_contents($argv[1]);

// var_dump($BUFFER);


$pattern = '/\e\[([0-9;]*)m/';
preg_match_all($pattern, $BUFFER, $matches);

if (!empty($matches[1])) {
    $ansiColors = $matches[1];

    $selectedColors = [];

    foreach ($ansiColors as $color) {
        $colorParts = explode(';', $color);
        $selectedColors[] = array_slice($colorParts, -3, 3);
    }
    $finalColors = [];
    foreach ($selectedColors as $rgb) {
        $hexColor = '#' . decimalToHex($rgb[0]) . @decimalToHex($rgb[1]) . @decimalToHex($rgb[2]);
        $finalColors[] = $hexColor;
    }
    $finalColors = array_values(array_unique($finalColors));

    // print_r($finalColors);


    // Use usort with an anonymous function and spaceship operator to sort by luminosity
    usort($finalColors, function ($color1, $color2) {
        // Extract RGB components from the color code
        sscanf($color1, "#%2x%2x%2x", $r1, $g1, $b1);
        $luminosity1 = 0.299 * $r1 + 0.587 * $g1 + 0.114 * $b1;

        sscanf($color2, "#%2x%2x%2x", $r2, $g2, $b2);
        $luminosity2 = 0.299 * $r2 + 0.587 * $g2 + 0.114 * $b2;

        // Compare by luminosity using the spaceship operator
        return $luminosity1 <=> $luminosity2;
    });

    echo json_encode($finalColors);

    $OUT = "";
    foreach ($finalColors as $color) {
        list($r, $g, $b) = sscanf($color, "#%2x%2x%2x");
        $OUT .= "\e[48;2;{$r};{$g};{$b}m   \e[0m ";
    }
    // echo PHP_EOL;
    // exec("tmux display-message '\"$OUT\"'");
    // exec("notify '\"$OUT\"'");
    file_put_contents("/tmp/colors.shell", "\n$OUT" . PHP_EOL, FILE_APPEND);
}

function decimalToHex($decimalValue)
{
    $hexValue = dechex($decimalValue);
    return str_pad($hexValue, 2, '0', STR_PAD_LEFT);
}
